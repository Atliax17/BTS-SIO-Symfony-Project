<?php
/**
 * Created by PhpStorm.
 * User: Jean-baptiste
 * Date: 02/06/2019
 * Time: 23:06
 */

namespace App\Controller;

use App\Form\ArticleEditType;
use App\Form\ArticleType;
use App\Entity\Article;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;;
use Symfony\Component\Routing\Annotation\Route;
use Knp\Component\Pager\PaginatorInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;

class ArticleController extends Controller
{
    /**
     * @Route("/newArticle", name="newArticle")
     */
    public function registerAction(Request $request) {
        // 1) On construit le formulaire
        $article = new Article();
        $form = $this->createForm(ArticleType::class, $article);
        // 2) On traite le submit (éffectué en POST)
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $article->getImage();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            // On déplace le fichier (image.s) dans le repertoire où les images sont stockées
            try {
                $file->move(
                    $this->getParameter('uploads_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // On créer un message "flash" pour indiquer si un problème survient pendant le téléchargement
                $this->addFlash('danger', 'Une erreur est survenue.');
            }
            $article->setImage($fileName);
            // On "marque" l'article créé de l'id de l'utilisateur
            $article->setIdCreator($this->getUser());
            // On définit l'état de l'article à "en vente"
            $article->setEtat(0);
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($article);
            $entityManager->flush();
            // On créer un message "flash" pour confirmer le succés de l'action à l'utilisateur
            $this->addFlash('success', 'Votre article à bien été enregistré.');
            return $this->redirectToRoute('admin');
        }
        // Redirection vers la vue
        return $this->render('article/addArticle.html.twig', [
            'form' => $form->createView()
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/article/{id}", name="show_article")
     * Method({"GET", "POST"})
     */
    public function show($id) {
        $article = $this->getDoctrine()
            ->getRepository('App:Article')
            ->find($id);
        return $this->render('article/showArticle.html.twig', array('article'=>$article));
    }

    /**
     * @Route("article/delete/{id}", name="delete_article")
     * @Method({"DELETE"})
     */
    public function deleteArticle(PaginatorInterface $paginator,Request $request, $id){
        // On récupere l'article en question à l'aide son id
        $article = $this->getDoctrine()
            ->getRepository('App:Article')
            ->find($id);
        $entityManager = $this->getDoctrine()->getManager();
        // On supprime l'article à l'aide de remove
        $entityManager->remove($article);
        $entityManager->flush();
        // On créer un message "flash" pour confirmer le succés de l'action à l'utilisateur
        $this->addFlash('success', 'Votre article à bien été supprimé.');
        // On récupere les informations nécessaire à la redirection
        $articles = $paginator->paginate(
            $this->getDoctrine()->getRepository('App:Article')->findBy(array('etat'=>'0')),
            $request->query->getInt('page', 1),
            5);
        return $this->render('admin/pages/article.html.twig', [
            'articles'=>$articles
        ]);
    }

    /**
     * @Route("/article/edit/{id}", name="edit_article")
     * Method({"GET", "POST"})
     */
    public function editArticle(PaginatorInterface $paginator,Request $request, $id) {
        $article = $this->getDoctrine()
            ->getRepository('App:Article')
            ->find($id);
        $form = $this->createForm(ArticleEditType::class, $article);
        // 2) handle the submit (will only happen on POST)
        $form->handleRequest($request);
        $articles = $paginator->paginate(
            $this->getDoctrine()->getRepository('App:Article')->findBy(array('etat'=>'0')),
            $request->query->getInt('page', 1),
            5);
        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($article);
            $entityManager->flush();
            // ... do any other work - like sending them an email, etc
            // maybe set a "flash" success message for the user
            $this->addFlash('success', 'Votre article à bien été enregistré.');
            return $this->redirectToRoute('admin');
        }
        return $this->render('article/editArticle.html.twig', [
            'form' => $form->createView(),
            'article'=>$article]);
    }

    /**
     * @Route("/filter/{category}", name="filter")
     * Method({"GET", "POST"})
     */
    public function filter(PaginatorInterface $paginator,Request $request,$category) {
        $articles = $paginator->paginate(
            $this->getDoctrine()->getRepository('App:Article')->findByCategory($category),
            $request->query->getInt('page', 1),
            12
        );
        $categories = $this->getDoctrine()
            ->getRepository('App:Category')
            ->findAll();
        return $this->render('boutique/index.html.twig', [
            'articles'=>$articles,
            'categories'=>$categories
        ]);
    }

    /**
     * @Route("/article/buy_article/{id}", name="buy_article")
     * Method({"GET", "POST"})
     */
    public function buy($id){
        $article = $this->getDoctrine()
            ->getRepository('App:Article')
            ->find($id);
        $article->setEtat(1);
        $article->setIdCreator($this->getUser());
        $user = $this->getUser();
        $user->setSolde($user->getSolde()-$article->getPrice());
        /*$user = $this->getDoctrine()
            ->getRepository('App:User')
            ->find($id);
        $user->setSolde($user->getSolde()+$article->getPrice());*/
        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($article);
        $entityManager->flush();
        // ... do any other work - like sending them an email, etc
        // maybe set a "flash" success message for the user
        $this->addFlash('success', 'Votre article à bien été enregistré.');
        return $this->render('homepage/home.html.twig');
    }
}